# General
general.about-me=About Me
general.works=Works
general.skills=Skills
general.developer=Developer
general.type=Type
general.date=Date
general.technologies=Technologies
general.technology=Technology
general.role=Role
general.my-name=Borja Castellano
general.team-and-colaborators=Team and Collaborators

# home.rs -> Left Pane
home.left-pane.profession=Software Engineer
home.left-pane.download-cv=Download CV

# home.rs -> Left Pane -> Contact Info
home.left-pane.contact-info.email-title=Email
home.left-pane.contact-info.email-detail=borjacastellano1@gmail.com

home.left-pane.contact-info.phone-title=Phone
home.left-pane.contact-info.phone-detail=+34 681 240 207

home.left-pane.contact-info.ubi-title=Location
home.left-pane.contact-info.ubi-detail=Relocating to Seattle, Washington, on October 3rd

home.left-pane.contact-info.availability-title=Availability
home.left-pane.contact-info.availability-detail=Morning and afternoon

home.left-pane.contact-info.nacionality-title=Nationality
home.left-pane.contact-info.nacionality-detail=Spain & USA

# about.rs
about.p-1=I am a programmer passionate about problem-solving, creating innovative solutions, and system software, with a love for learning. With a background in Mathematics and a self-taught journey in programming, I have experience in application development and problem-solving using languages such as C, C#, Java, and Rust.
about.p-2=I am currently working on personal projects, especially The Round Table, an open-source POS software that is already in use in a couple of bars and restaurants in Galicia. Alongside this project, I have others (which can be seen in this portfolio) through which I have gained experience in software development.
about.p-3=My goal is to continue growing as a developer and learning new technologies and concepts. The field that interests me the most is system and scientific software.

# skill dyn-data
skill.cs-unity.title=C# and Unity3D
skill.cs-unity.description=With two years of experience using Unity and C#, I have developed strong application development skills, demonstrating my ability to work in complex development environments.

skill.c.title=C
skill.c.description=C is the language I started with, and more recently it has allowed me to work on scientific computing projects at CESGA, where I have gained experience in solving complex problems and optimizing code.

skill.java-javafx.title=Java and JavaFX
skill.java-javafx.description=Both Java and JavaFX have allowed me to expand my programming skill set and my potential by enabling me to create cross-platform user applications.

skill.problem-solving.title=Problem-Solving and Critical Thinking
skill.problem-solving.description=My degree in Mathematics has provided me with strong problem-solving and critical-thinking skills applicable to software development.

skill.rust.title=Rust
skill.rust.description=As Rust is a language I love, my experience with it has allowed me to explore new ways of programming and develop system and high-performance software.

skill.selftaught.title=Self-Taught
skill.selftaught.description=My self-taught background demonstrates my ability to learn independently and adapt quickly and flexibly to new technologies and concepts.

skill.teamwork-leadership.title=Teamwork and Leadership
skill.teamwork-leadership.description=My ability to lead, collaborate in a team, and communicate ideas effectively is reinforced by my experience as a teacher.

# works.rs

# works dyn-data
# technologies
work.technology.spring-boot=Spring Boot
work.technology.rocket=Rocket
work.technology.java-fx=JavaFX
work.technology.trt=JavaFX and Rust
work.technology.unity=Unity

# roles
work.role.developer=Developer
work.role.lead-developer=Lead Developer
work.role.teacher=Teacher
work.role.architect-developer=Architect and Developer

# works section Rust
work-section.rust.title=Rust

work.mk-template.title=MK Template
work.mk-template.description=Console application that allows users to save different formats of file and directory templates to be instantiated quickly and easily in the future.
work.mk-template.type=Console Application

work.db-sniffer.title=DB-Sniffer
work.db-sniffer.description=Tool for introspecting and export the structure of relational databases.
work.db-sniffer.type=Console Application

work.trt-api.title=The Round Table REST API
work.trt-api.description=This API provides license verification methods and distributes both plugins and updates for the main application and its plugins.
work.trt-api.type=REST API

# works section Java
work-section.java.title=Java

work.seal-code.title=Seal Code
work.seal-code.description=Advanced text editor designed to serve as a foundation for creating IDEs.
work.seal-code.type=Advanced Text Editor

work.leba-api.title=Leba REST API
work.leba-api.description=This API manages users, collects gameplay data, and handles the leaderboard.
work.leba-api.type=REST API

work.the-round-table.title=The Round Table
work.the-round-table.description=Visually appealing and user-friendly application for bar and restaurant management. It includes systems for managing tables, printing receipts, viewing statistics, and managing products.
work.the-round-table.type=POS for Bars and Restaurants

# works section scientific
work-section.scientific.title=Scientific

work.cuqdyn-c.title=Cuqdyn-C
work.cuqdyn-c.description=Library and CLI for Uncertainty Quantification in Dynamic Models of Biological Systems Using Conformal Prediction
work.cuqdyn-c.type=Console app, scientific computing and research
work.cuqdyn-c.role=Lead Developer

# works section C#
work-section.csharp.title=C#

work.leba.title=Leba
work.leba.description=Vertical platforming game with skins, achievements, combat, and procedural generation.
work.leba.type=Mobile Game
work.leba.role=Designer, Architect, and Developer

# work.rs
work-view.section-title.technicaldata=Technical Data
work-view.section-title.features=Features
work-view.section-title.downloads=Downloads
work-view.section-title.project-description=Project Description
work-view.section-title.state=State
work-view.section-title.multimedia=Multimedia

# work view -> Leba
work-view.leba.technicaldata.technologies=C# and Unity
work-view.leba.technicaldata.role=Designer, Architect, and Developer

work-view.leba.features.1=2D Vertical Platformer Game
work-view.leba.features.2=Skin and Achievement System
work-view.leba.features.3=Combat and Procedural Generation
work-view.leba.features.4=Scoreboard Rankings

work-view.leba.description.1=Vertical platforming game with procedurally generated levels. The main gameplay mechanic involves wall-jumping to ascend as high as possible while avoiding obstacles and unique enemies with distinctive mechanics.
work-view.leba.description.2=The game features a skin and achievement system that unlock as you play. It also includes its own server and a global leaderboard system based on high scores.
work-view.leba.description.3=From a code architecture perspective, various design patterns such as Strategy and State are used to allow easy scalability and maintenance.

work-view.leba.state.1.title=Availability
work-view.leba.state.1.detail=The game is available for download on the Play Store.

# work view -> Leba REST API
work-view.leba-api.technicaldata.technologies=Java and Spring Boot
work-view.leba-api.technicaldata.role=Architect and Developer

work-view.leba-api.features.1=Use of Spring Boot
work-view.leba-api.features.2=Use of Lombok

work-view.leba-api.description.1=This API manages user accounts, collects gameplay data, and handles the leaderboard. All information is stored in a MySQL database on the server.
work-view.leba-api.description.2=Currently in production, it is used by the mobile application for Leba, which has over 2000 downloads on the Play Store.

work-view.leba-api.state.1.title=Code Availability
work-view.leba-api.state.1.detail=For security reasons, the source code is not publicly available.

# work view -> MK Template
work-view.mk-template.technicaldata.technologies=Rust
work-view.mk-template.technicaldata.role=Architect and Developer

work-view.mk-template.features.1=Saving different template formats
work-view.mk-template.features.2=Creation of files and directories

work-view.mk-template.description.1=Often, I found myself needing a directory structure I had used in other projects. To avoid repeatedly recreating this structure manually, I developed a console application to save various template formats for quick and easy future use.
work-view.mk-template.description.2=Currently, the application supports:
work-view.mk-template.description.3=    • Saving a directory with all its contents as a template to copy in the future.
work-view.mk-template.description.4=    • Saving a URI pointing to a .git repository, which will be cloned whenever the template is instantiated.
work-view.mk-template.description.5=    • Using a defined XML structure to save and create templates.

work-view.mk-template.state.1.title=Availability
work-view.mk-template.state.1.detail=The source code is available on GitHub. Running the `install.sh` script compiles the project and copies the executable to the `~/.local/bin` folder. The project is open-source and can be freely modified and distributed.
work-view.mk-template.state.2.title=Updates
work-view.mk-template.state.2.detail=The project is under continuous development, with plans to add support for new template types and a proprietary XML for defining templates.
work-view.mk-template.state.3.title=Documentation
work-view.mk-template.state.3.detail=The project's documentation is available in the `README.md` file, or will be created in the near future if it doesn't yet exist.

# work view -> Seal Code
work-view.seal-code.technicaldata.technologies=Java and JavaFX
work-view.seal-code.technicaldata.role=Architect and Developer

work-view.seal-code.features.1=Advanced text editor
work-view.seal-code.features.2=Custom IDE creation
work-view.seal-code.features.3=Syntax highlighting and autocomplete
work-view.seal-code.features.4=Cloud synchronization

work-view.seal-code.description.1=Seal Code is an advanced text editor designed for creating custom development environments. The project's main idea is to develop a powerful core that facilitates easy implementation of plugins to extend its functionalities. Users can create custom autocomplete and syntax highlighting templates for different file extensions without needing knowledge of JavaFX.
work-view.seal-code.description.2=The core communicates via events with the logic a programmer wants to implement, allowing customization of every aspect of the desired development environment. This approach minimizes the need to understand internal software operations, making implementation easier.
work-view.seal-code.description.3=Currently, the IDE includes a simple plugin oriented toward Java development as an example of the core's capabilities. It also features a plugin for user account creation, enabling configuration synchronization across multiple instances of the software.

work-view.seal-code.state.1.title=Development
work-view.seal-code.state.1.detail=The core is awaiting a minor refactor. Plans include developing additional plugins to expand basic functionalities and modifying the cloud synchronization plugin to use a proprietary server with HTTP requests.
work-view.seal-code.state.2.title=Availability
work-view.seal-code.state.2.detail=The code is publicly available on GitHub, but a final software version is not yet released.
work-view.seal-code.state.3.title=Documentation
work-view.seal-code.state.3.detail=The project is pending documentation.

# work view -> The Round Table
work-view.the-round-table.technicaldata.technologies=JavaFX and Rust
work-view.the-round-table.technicaldata.role=Architect and Developer

work-view.the-round-table.features.1=Receipt printing and management
work-view.the-round-table.features.2=Product management
work-view.the-round-table.features.3=Table management
work-view.the-round-table.features.4=Micro-kernel architecture

work-view.the-round-table.description.1=POS software for managing restaurants and bars. It allows product and table management, as well as receipt printing. Additionally, it provides statistics visualization since all receipt data is stored in an SQLite database.
work-view.the-round-table.description.2=The software is developed in Java, with JavaFX used for the graphical interface. It can communicate with receipt printers using the ESC/POS protocol.
work-view.the-round-table.description.3=Regarding the software architecture, a micro-kernel architecture has been implemented to separate the core application logic from plugins that can be added to extend its functionality. An MVC design pattern has also been used to separate the graphical interface logic, along with several other design patterns that ensure easy scalability and maintainability of the code.
work-view.the-round-table.description.4=Plugin development is simple and flexible. Developers have built-in functionalities to interact with the database, graphical interface, and other plugins easily and efficiently. As an open-source project, the repositories of currently developed plugins are available for exploration to understand how they work and interact.

work-view.the-round-table.state.1.title=Availability
work-view.the-round-table.state.1.detail=The software is currently running in a beta version in several establishments. At the moment, only the Linux version is publicly available, but a Windows version is in development and is expected to be released with version 3.0.0.
work-view.the-round-table.state.2.title=Documentation
work-view.the-round-table.state.2.detail=The project documentation and plugin development guide are not yet completed and have been postponed until the release of version 3.0.0 and the resolution of potential bugs. I apologize for the situation, but the request to develop this software was recent, and I have not had the time to document the project's functionality and approach in greater depth.
work-view.the-round-table.state.3.title=Update
work-view.the-round-table.state.3.detail=The project is in continuous development and is updated with each new version. Version 3.0.0 is expected to be released before June, featuring a major new addition: a network protocol that will enable communication between different instances of the software, defining one as the central server. This is a fundamental feature that should have been included in the initial release but, due to time constraints, has only now been implemented.

# work view -> The Round Table REST API
work-view.trt-api.technicaldata.technologies=Rust and Rocket
work-view.trt-api.technicaldata.role=Architect and Developer

work-view.trt-api.features.1=Update distribution
work-view.trt-api.features.2=License verification

work-view.trt-api.description.1=A simple REST API enabling communication between the lebastudios.org server and The Round Table application to deliver updates and plugins to end-users. It also handles license verification.
work-view.trt-api.description.2=The API is developed in Rust using the Rocket framework. Rust was chosen for its speed, security, and low resource consumption (currently using only 6.1 MB of memory). Rocket simplifies and accelerates the creation of REST APIs, much like Spring Boot.

work-view.trt-api.state.1.title=Development
work-view.trt-api.state.1.detail=The API is under constant development and is updated with each new version.
work-view.trt-api.state.2.title=Availability
work-view.trt-api.state.2.detail=For the security of current and future users, the source code is not publicly available.

# work view -> Cuqdyn-C
work-view.cuqdyn-c.technicaldata.technologies=C, Fortran, Rust and MPI
work-view.cuqdyn-c.technicaldata.role=Architect and Developer

work-view.cuqdyn-c.features.1=Dynamic problem resolution
work-view.cuqdyn-c.features.2=MPI parallelization
work-view.cuqdyn-c.features.3=Uncertainty Quantification in Dynamic Models of Biological Systems

work-view.cuqdyn-c.description.1=Cuqdyn-C is a library and CLI for Uncertainty Quantification in Dynamic Models of Biological Systems. This project was developed at CESGA, commissioned by CSIC, with the objective of transpiling Matlab code from a study carried out by CSIC and Harvard University into C for subsequent parallelization and optimization.
work-view.cuqdyn-c.description.2=The project uses C for the application logic, Fortran for the ESS solver responsible for generating possible solutions to the problem given observed states, and Rust for model definitions. In addition, MPI was used within a distributed computing environment to parallelize the application and solve large-scale problems.
work-view.cuqdyn-c.description.3=The original study can be found at the following link: https://zenodo.org/records/13838652

work-view.cuqdyn-c.state.1.title=Development
work-view.cuqdyn-c.state.1.detail=Both the library and the CLI have met their objectives and were delivered to the clients. Nevertheless, further development is not ruled out, such as adding the possibility of using fewer observed states than those defined by the model.

# work view -> DB-sniffer
work-view.db-sniffer.technicaldata.technologies=Rust and different relational databases
work-view.db-sniffer.technicaldata.role=Architect and Developer

work-view.db-sniffer.features.1=Relational databases

work-view.db-sniffer.description.1=DB-Sniffer is a tool for the introspection of relational databases. It allows connecting to different databases and obtaining information about tables, columns, and their relationships, to later export the data obtained to different formats such as Hibernate mapping files.
work-view.db-sniffer.description.2=The application was developed due to the need to generate Hibernate XML mapping files during my time as a student, since this form of mapping is obsolete and I was unable to find an available tool to do it easily.

work-view.db-sniffer.state.1.title=Development
work-view.db-sniffer.state.1.detail=The application has already fulfilled its initial purpose of exporting to Hibernate XML mapping files, but due to its architecture and the ease of adding new databases and export options, it is not ruled out that these may be added in the future.